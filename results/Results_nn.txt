GridSearchCV took 39569.42 seconds for 180 candidate parameter settings.
Model with rank: 1
Mean validation score: 0.967 (std: 0.004)
Parameters: {'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'adam'}

Model with rank: 1
Mean validation score: 0.967 (std: 0.004)
Parameters: {'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'adam'}

Model with rank: 1
Mean validation score: 0.967 (std: 0.004)
Parameters: {'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'adam'}

Best parameters set found on development set:
()
{'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'adam'}
()
Grid scores on development set:
()
0.964 (+/-0.000) for {'alpha': 0.0001, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.964 (+/-0.000) for {'alpha': 0.0001, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.964 (+/-0.000) for {'alpha': 0.0001, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.965 (+/-0.001) for {'alpha': 0.001, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.965 (+/-0.001) for {'alpha': 0.001, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.965 (+/-0.001) for {'alpha': 0.001, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.966 (+/-0.002) for {'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.966 (+/-0.002) for {'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.966 (+/-0.002) for {'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.966 (+/-0.002) for {'alpha': 0.1, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.966 (+/-0.002) for {'alpha': 0.1, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.966 (+/-0.002) for {'alpha': 0.1, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.965 (+/-0.005) for {'alpha': 0.9, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.965 (+/-0.005) for {'alpha': 0.9, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.965 (+/-0.005) for {'alpha': 0.9, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.919 (+/-0.022) for {'alpha': 0.0001, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.919 (+/-0.022) for {'alpha': 0.0001, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.919 (+/-0.022) for {'alpha': 0.0001, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.921 (+/-0.026) for {'alpha': 0.001, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.921 (+/-0.026) for {'alpha': 0.001, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.921 (+/-0.026) for {'alpha': 0.001, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.920 (+/-0.021) for {'alpha': 0.01, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.920 (+/-0.021) for {'alpha': 0.01, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.920 (+/-0.021) for {'alpha': 0.01, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.927 (+/-0.008) for {'alpha': 0.1, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.927 (+/-0.008) for {'alpha': 0.1, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.927 (+/-0.008) for {'alpha': 0.1, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.960 (+/-0.027) for {'alpha': 0.9, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.960 (+/-0.027) for {'alpha': 0.9, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.960 (+/-0.027) for {'alpha': 0.9, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.888 (+/-0.005) for {'alpha': 0.0001, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.888 (+/-0.005) for {'alpha': 0.0001, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.888 (+/-0.005) for {'alpha': 0.0001, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.863 (+/-0.039) for {'alpha': 0.001, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.863 (+/-0.039) for {'alpha': 0.001, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.863 (+/-0.039) for {'alpha': 0.001, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.886 (+/-0.027) for {'alpha': 0.01, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.886 (+/-0.027) for {'alpha': 0.01, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.886 (+/-0.027) for {'alpha': 0.01, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.912 (+/-0.013) for {'alpha': 0.1, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.912 (+/-0.013) for {'alpha': 0.1, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.912 (+/-0.013) for {'alpha': 0.1, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.953 (+/-0.044) for {'alpha': 0.9, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.953 (+/-0.044) for {'alpha': 0.9, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.953 (+/-0.044) for {'alpha': 0.9, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.0001, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.0001, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.0001, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.001, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.001, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.001, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.01, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.01, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.01, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.1, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.1, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.1, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.9, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.9, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'lbfgs'}
0.273 (+/-0.000) for {'alpha': 0.9, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'lbfgs'}
0.963 (+/-0.009) for {'alpha': 0.0001, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'sgd'}
0.151 (+/-0.005) for {'alpha': 0.0001, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.963 (+/-0.009) for {'alpha': 0.0001, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.963 (+/-0.009) for {'alpha': 0.001, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'sgd'}
0.151 (+/-0.005) for {'alpha': 0.001, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.963 (+/-0.009) for {'alpha': 0.001, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.963 (+/-0.009) for {'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'sgd'}
0.151 (+/-0.005) for {'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.963 (+/-0.009) for {'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.963 (+/-0.009) for {'alpha': 0.1, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'sgd'}
0.151 (+/-0.005) for {'alpha': 0.1, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.963 (+/-0.009) for {'alpha': 0.1, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.962 (+/-0.008) for {'alpha': 0.9, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'sgd'}
0.151 (+/-0.005) for {'alpha': 0.9, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.962 (+/-0.008) for {'alpha': 0.9, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.0001, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'sgd'}
0.095 (+/-0.000) for {'alpha': 0.0001, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.0001, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.001, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'sgd'}
0.095 (+/-0.000) for {'alpha': 0.001, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.001, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.01, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'sgd'}
0.095 (+/-0.000) for {'alpha': 0.01, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.01, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.1, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'sgd'}
0.095 (+/-0.000) for {'alpha': 0.1, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.1, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.9, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'sgd'}
0.095 (+/-0.000) for {'alpha': 0.9, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.9, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.822 (+/-0.005) for {'alpha': 0.0001, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'sgd'}
0.121 (+/-0.001) for {'alpha': 0.0001, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.822 (+/-0.005) for {'alpha': 0.0001, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.822 (+/-0.005) for {'alpha': 0.001, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'sgd'}
0.121 (+/-0.001) for {'alpha': 0.001, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.822 (+/-0.005) for {'alpha': 0.001, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.822 (+/-0.005) for {'alpha': 0.01, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'sgd'}
0.121 (+/-0.001) for {'alpha': 0.01, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.822 (+/-0.005) for {'alpha': 0.01, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.821 (+/-0.006) for {'alpha': 0.1, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'sgd'}
0.121 (+/-0.001) for {'alpha': 0.1, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.821 (+/-0.006) for {'alpha': 0.1, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.814 (+/-0.010) for {'alpha': 0.9, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'sgd'}
0.121 (+/-0.001) for {'alpha': 0.9, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.814 (+/-0.010) for {'alpha': 0.9, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.0001, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'sgd'}
0.095 (+/-0.000) for {'alpha': 0.0001, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.0001, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.001, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'sgd'}
0.095 (+/-0.000) for {'alpha': 0.001, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.001, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.01, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'sgd'}
0.095 (+/-0.000) for {'alpha': 0.01, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.01, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.1, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'sgd'}
0.095 (+/-0.000) for {'alpha': 0.1, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.1, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.9, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'sgd'}
0.095 (+/-0.000) for {'alpha': 0.9, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'sgd'}
0.273 (+/-0.000) for {'alpha': 0.9, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'sgd'}
0.965 (+/-0.007) for {'alpha': 0.0001, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'adam'}
0.965 (+/-0.007) for {'alpha': 0.0001, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.965 (+/-0.007) for {'alpha': 0.0001, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.965 (+/-0.007) for {'alpha': 0.001, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'adam'}
0.965 (+/-0.007) for {'alpha': 0.001, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.965 (+/-0.007) for {'alpha': 0.001, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.967 (+/-0.008) for {'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'adam'}
0.967 (+/-0.008) for {'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.967 (+/-0.008) for {'alpha': 0.01, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.966 (+/-0.004) for {'alpha': 0.1, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'adam'}
0.966 (+/-0.004) for {'alpha': 0.1, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.966 (+/-0.004) for {'alpha': 0.1, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.958 (+/-0.008) for {'alpha': 0.9, 'activation': 'identity', 'learning_rate': 'constant', 'solver': 'adam'}
0.958 (+/-0.008) for {'alpha': 0.9, 'activation': 'identity', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.958 (+/-0.008) for {'alpha': 0.9, 'activation': 'identity', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.894 (+/-0.008) for {'alpha': 0.0001, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'adam'}
0.894 (+/-0.008) for {'alpha': 0.0001, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.894 (+/-0.008) for {'alpha': 0.0001, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.834 (+/-0.002) for {'alpha': 0.001, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'adam'}
0.834 (+/-0.002) for {'alpha': 0.001, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.834 (+/-0.002) for {'alpha': 0.001, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.834 (+/-0.002) for {'alpha': 0.01, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'adam'}
0.834 (+/-0.002) for {'alpha': 0.01, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.834 (+/-0.002) for {'alpha': 0.01, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.761 (+/-0.089) for {'alpha': 0.1, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'adam'}
0.761 (+/-0.089) for {'alpha': 0.1, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.761 (+/-0.089) for {'alpha': 0.1, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.725 (+/-0.006) for {'alpha': 0.9, 'activation': 'logistic', 'learning_rate': 'constant', 'solver': 'adam'}
0.725 (+/-0.006) for {'alpha': 0.9, 'activation': 'logistic', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.725 (+/-0.006) for {'alpha': 0.9, 'activation': 'logistic', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.807 (+/-0.265) for {'alpha': 0.0001, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'adam'}
0.807 (+/-0.265) for {'alpha': 0.0001, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.807 (+/-0.265) for {'alpha': 0.0001, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.899 (+/-0.016) for {'alpha': 0.001, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'adam'}
0.899 (+/-0.016) for {'alpha': 0.001, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.899 (+/-0.016) for {'alpha': 0.001, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.905 (+/-0.004) for {'alpha': 0.01, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'adam'}
0.905 (+/-0.004) for {'alpha': 0.01, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.905 (+/-0.004) for {'alpha': 0.01, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.869 (+/-0.014) for {'alpha': 0.1, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'adam'}
0.869 (+/-0.014) for {'alpha': 0.1, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.869 (+/-0.014) for {'alpha': 0.1, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.615 (+/-0.003) for {'alpha': 0.9, 'activation': 'tanh', 'learning_rate': 'constant', 'solver': 'adam'}
0.615 (+/-0.003) for {'alpha': 0.9, 'activation': 'tanh', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.615 (+/-0.003) for {'alpha': 0.9, 'activation': 'tanh', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.0001, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.0001, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.0001, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.001, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.001, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.001, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.01, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.01, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.01, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.1, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.1, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.1, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.9, 'activation': 'relu', 'learning_rate': 'constant', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.9, 'activation': 'relu', 'learning_rate': 'invscaling', 'solver': 'adam'}
0.273 (+/-0.000) for {'alpha': 0.9, 'activation': 'relu', 'learning_rate': 'adaptive', 'solver': 'adam'}
Detailed classification report:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
/home/mbr/work/virtualenvs/malclass/lib/python2.7/site-packages/sklearn/metrics/classification.py:1113: UndefinedMetricWarning: Precision and F-scor
e are ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
             precision    recall  f1-score   support

          1       0.97      0.95      0.96       518
          2       0.99      0.99      0.99       844
          3       1.00      0.99      0.99       956
          4       0.79      0.98      0.87       145
          5       0.00      0.00      0.00        15
          6       0.97      0.98      0.98       248
          7       0.96      0.95      0.95       139
          8       0.99      0.92      0.95       400
          9       0.93      0.98      0.95       322

avg / total       0.97      0.97      0.97      3587

()


