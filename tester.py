from scipy import io

from scipy.sparse import csr_matrix

from sklearn import svm

from sklearn.neural_network import MLPClassifier

from sklearn.ensemble import RandomForestClassifier

from sklearn.model_selection import cross_val_score

matrix = csr_matrix([])
y  = []

'''SVM Model Verifier'''
def svm_model(data, target, nfold):
    svm_ = svm.SVC(kernel='rbf', C=100, gamma=0.0001)
    scores = cross_val_score(svm_, data, target, cv=nfold, n_jobs=-1,
                             scoring='f1_micro')

    print '------------Report for SVM------------'
    print scores
    print ("Accuracy: %0.4f (+/- %0.4f)" % (scores.mean(), scores.std()*2))
    print '--------------------------------------'

'''NN Model Verifier'''
def nn_model(data, target, nfold):
    nn_ = MLPClassifier(solver='adam', learning_rate='adaptive',
                        activation='identity', alpha=0.01,
                        hidden_layer_sizes=(5,2))
    scores = cross_val_score(nn_, data, target, cv=nfold,
                             n_jobs=-1,scoring='f1_micro')

    print '-------Report for Neural Network------'
    print scores
    print ("Accuracy: %0.4f (+/- %0.4f)" % (scores.mean(), scores.std()*2))
    print '--------------------------------------'


'''Random Forest Verifier'''
def rf_model(data, target, nfold):
    rf_ = RandomForestClassifier(n_estimators=20, bootstrap=False,
                                 min_samples_leaf=1, min_samples_split=2,
                                 criterion='gini', max_features=3,
                                 max_depth=None)
    scores = cross_val_score(rf_, data, target, cv=nfold, n_jobs=-1,
                             scoring='f1_micro')

    print '--------Report for Random Forest-------'
    print scores
    print ("Accuracy: %0.4f (+/- %0.4f)" % (scores.mean(), scores.std()*2))
    print '---------------------------------------'

def main():
    global matrix
    global y
    '''Loading matrix'''
    matrix = io.mmread('matrix')
    '''Loading y'''
    with open('list.mtx', 'r') as file_:
        for  l in file_:
            y.append(int(l))

    svm_model(matrix, y, 10)
    nn_model (matrix, y, 10)
    rf_model (matrix, y, 10)

if __name__ == "__main__":
    main()
