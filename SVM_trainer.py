import os
import sys
import json
import progressbar

from scipy.sparse import csr_matrix, vstack
from multiprocessing import Pool
# from multiprocessing import Lock

"""absolute DIR of the program"""
DIR  = os.path.abspath(sys.argv[1])
"""Contains the dataset"""
matrix = None
"""Status bar"""
bar = None
"""Counter for status bar"""
counter = 0
"""Features labels"""
y = []

"""Callback function"""
def update(r):
    vect, feat = r
    global counter
    global matrix
    global y
    y.append(feat)

    if matrix == None:
        matrix = csr_matrix(vect)
    else:
        matrix = vstack([matrix,vect])

    counter += 1
    bar.update(counter)

"""LoadJSON"""
def loadJSON(f, worker_id):
    with open (DIR+ "/" + f, "r") as fd:
        data = json.load(fd)
        y = data['family']

        """Deleting useless key"""
        del data['bytes_path']
        del data['family']
        del data['asm_path']
        del data['id']

    return (data.values(),y)

pool = Pool(processes=20)

"""Sfm trainer main function"""
def svm_trainer():
    global bar
    global matrix
    global y
    global pool

    i = 0
    for root, dirs, filenames in os.walk(DIR):
        for f in filter(lambda x:x.endswith(".json"), filenames):
            pool.apply_async(loadJSON,
                             args=(f,i,),
                             callback=update)
            i += 1
        bar = progressbar.ProgressBar(max_value=i)
        pool.close()
        pool.join()

    print matrix.getnnz()

if __name__ == "__main__":
    svm_trainer()
